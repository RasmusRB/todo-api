name: Build and Deploy to Azure

on:
  push:
    branches:
      - main
      - develop
      - "feature/**"
      - "fix/**"
  pull_request:
    branches:
      - main
      - develop

env:
  AZURE_CONTAINER_REGISTRY: gotutacr
  IMAGE_NAME: gotut-api
  RESOURCE_GROUP: gotut-rg
  CONTAINER_NAME: gotut-api
  LOCATION: germanywestcentral

jobs:
  check-commit:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: Check commit message
        id: check
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MSG"

          if [[ "$COMMIT_MSG" =~ ^(feat|fix): ]]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "✅ Commit follows Angular convention (feat/fix) - will build"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "⏭️ Commit does not start with feat: or fix: - skipping build"
          fi

  build:
    needs: check-commit
    runs-on: ubuntu-latest
    if: needs.check-commit.outputs.should_build == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
          username: ${{ secrets.AZURE_ACR_USERNAME }}
          password: ${{ secrets.AZURE_ACR_PASSWORD }}

      - name: Extract commit short SHA
        id: vars
        run: echo "short_sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/Dockerfile
          push: true
          tags: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.short_sha }}
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Image built successfully
        run: |
          echo "✅ Docker image built and pushed successfully"
          echo "   Image: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.short_sha }}"
          echo "   Also tagged as: latest"

  deploy-staging:
    needs: [check-commit, build]
    runs-on: ubuntu-latest
    if: needs.check-commit.outputs.should_build == 'true' && github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: http://gotut-api-staging.aehpfwbgdhgahdgx.germanywestcentral.azurecontainer.io:8080

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to staging (ACI)
        run: |
          echo "🚀 Deploying to staging environment..."

          # Delete existing staging container if exists
          az container delete \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_NAME }}-staging \
            --yes || true

          # Create new staging container
          az container create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_NAME }}-staging \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest \
            --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io \
            --registry-username ${{ secrets.AZURE_ACR_USERNAME }} \
            --registry-password ${{ secrets.AZURE_ACR_PASSWORD }} \
            --dns-name-label ${{ env.CONTAINER_NAME }}-staging \
            --os-type Linux \
            --ports 8080 \
            --protocol TCP \
            --cpu 1 \
            --memory 1.5 \
            --ip-address Public \
            --location ${{ env.LOCATION }} \
            --restart-policy Always \
            --environment-variables GIN_MODE=release

          echo "✅ Deployed to staging successfully"

      - name: Wait for container to be ready
        run: |
          echo "⏳ Waiting for container to start..."
          sleep 30

          FQDN=$(az container show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_NAME }}-staging \
            --query "ipAddress.fqdn" -o tsv)

          echo "🌐 Staging URL: http://${FQDN}:8080"
          echo "📚 Swagger: http://${FQDN}:8080/swagger/index.html"

  deploy-production:
    needs: [check-commit, build]
    runs-on: ubuntu-latest
    if: needs.check-commit.outputs.should_build == 'true' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: http://gotut-api.aehpfwbgdhgahdgx.germanywestcentral.azurecontainer.io:8080

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to production (ACI)
        run: |
          echo "🚀 Deploying to production environment..."

          # Delete existing production container
          az container delete \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_NAME }} \
            --yes || true

          # Create new production container
          az container create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_NAME }} \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:latest \
            --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io \
            --registry-username ${{ secrets.AZURE_ACR_USERNAME }} \
            --registry-password ${{ secrets.AZURE_ACR_PASSWORD }} \
            --dns-name-label ${{ env.CONTAINER_NAME }} \
            --os-type Linux \
            --ports 8080 \
            --protocol TCP \
            --cpu 1 \
            --memory 1.5 \
            --ip-address Public \
            --location ${{ env.LOCATION }} \
            --restart-policy Always \
            --environment-variables GIN_MODE=release

          echo "✅ Deployed to production successfully"

      - name: Wait for container to be ready
        run: |
          echo "⏳ Waiting for container to start..."
          sleep 30

          FQDN=$(az container show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_NAME }} \
            --query "ipAddress.fqdn" -o tsv)

          echo "🌐 Production URL: http://${FQDN}:8080"
          echo "📚 Swagger: http://${FQDN}:8080/swagger/index.html"

      - name: Deployment summary
        run: |
          echo "## 🎉 Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Production Environment" >> $GITHUB_STEP_SUMMARY
          echo "- **API**: http://gotut-api.aehpfwbgdhgahdgx.germanywestcentral.azurecontainer.io:8080/todos" >> $GITHUB_STEP_SUMMARY
          echo "- **Swagger**: http://gotut-api.aehpfwbgdhgahdgx.germanywestcentral.azurecontainer.io:8080/swagger/index.html" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Image Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
